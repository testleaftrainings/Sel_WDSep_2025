
--------------------------------------------------------------------------------------

What is XPath?


XPath stands for XML Path Language. XPath is mainly used in XSLT(Extensible Stylesheet Language Transformations), A language used to transform XML documents into other formats (XML, HTML, text, etc.). because it enables precise and flexible navigation, querying, and filtering of XML data, which are fundamental operations for transforming XML documents effectively(Processes XML data and converts it into a different format or HTML format to display in a web browser.). but it is also popularly used for navigating through the DOM(Document Object Mode) of any XML-like language document using XPathExpression. 

Types of XPath
An XPath expression can be written in two ways 

A)Absolute
B)Relative


Definition and Structure:

 

Absolute XPath(Precise Data Selection): It starts from the root (html) and traverses down to the desired element, detailing every single element in the hierarchy. The path starts with a single forward slash /, indicating the root. 

For example: /html/body/div[2]/div[2]/div/form/p[1]/input.


Relative XPath: It starts from anywhere within the document and typically focuses on identifying elements based on attributes, indexes, or specific tags, not necessarily detailing the entire path from the root. It starts with a double forward slash //, indicating the search can begin anywhere. 

For example: //input[@id=‚Äòusername‚Äô].

1)Robustness:

Absolute XPath: It is less robust because if there are any changes in the path or structure of the web page, the XPath would break, leading to failed element location.

Relative XPath: It is more robust as it usually focuses on specific attributes or elements, making it less susceptible to changes in the overall structure of the webpage.

2)Length and Complexity:

Absolute XPath: These tend to be longer . They map the entire path from the root to the element, making them more complex.

Relative XPath: They are generally shorter and more concise, targeting specific elements directly without detailing the entire path, reducing complexity.


3)Flexibility and Use Cases:

Absolute XPath: It's less commonly used in dynamic web environments where page structures can change frequently.

Relative XPath: More commonly used in web automation and scraping because of its adaptability to web page changes and ability to precisely target elements.

4)Performance:

Absolute XPath: It can be slower in performance as it requires traversing the entire hierarchy of the DOM (Document Object Model) from the root.

Relative XPath: Generally offers better performance as it allows for more direct queries and doesn't necessarily traverse from the root.

--------------------------------------------------------------------------------------

Relative xpath

1)Node Navigation
  			Relative XPath provides a way to traverse XML trees, which is necessary for XSLT to locate nodes for transformation.
You can navigate:
Parent nodes (..)
Child nodes (/)
Descendant nodes (//)
Sibling nodes

2)Filtering and Conditions
 			Relative XPath allows the use of conditions to filter nodes based on attributes, text values, or structure


--------------------------------------------------------------------------------------

###Basic xpath

1)Attribute based xpath

Syntax: //tagname[@attribute='attributeValue'] 

üìå When to Use:

1)The HTML element has a unique or stable attribute.

2)Ideal for login fields, dropdowns, buttons, checkboxes when attributes are unique.

üí° Best choice when the attribute value is stable and unique.

Example://label[@for ='username']
	 	//label[@for='password']

*******************************************************
2)Text based xpath 

Syntax: //tagname[text()='text value'] 

üìå When to Use:

1) When element text is static and visible to the user.

2) Works well for buttons, headers, tabs, links where text content is unique

üí° Easy to understand and highly readable, but avoid if text might change dynamically

Example://h2[text()='Leaftaps Login'] 
		//span[text()='Learn More'] 
		//a[text()='Commerce Setup Assistant']
********************************************************
3)Functions based xpath

Leverages functions like:

A) Contains() :

returns elements with partial matches, 

syntax: //tagname[contains(@attributeName,'partial attribute value')] 

üìå When to Use:

1) Attribute values are long or dynamic, and you only need to match part of it.

2) Used frequently in dynamic pages, like dashboards or search results.

Example: //div[contains(@class, ‚Äòheader‚Äô)].


B) Partial text based xpath:

syntax: //tagname[contains(text(),'partial text')] 

üìå When to Use:

1) Text or attribute is partially predictable, like menu names or module links.

2) Often used when only part of a name is constant across builds.

Example: //a[contains(text(),'Lightning E')]


*************************************************************************
4)Collection based xpath

Syntax: (any xpath)[index] Index will starts from 1 

üìå When to Use:

1) When multiple similar elements are present and you want a specific one.

2) Common in table rows, repeated buttons, radio buttons, etc.

‚ö†Ô∏è Indexing should be used only when no better unique identifier is available, and the structure is stable.

Example: (//span[@class=' label bBody'])[3] 
	(//span[text()='Login'])[2]

--------------------------------------------------------------------------------------
XPath Type	 |	Ideal For
-------------------------------------------------------------------------------------
Attribute Based	 |	Most reliable for unique inputs, buttons, checkboxes
Text Based	 |	Tabs, buttons, headers, visible static elements
contains()	 |	Dynamic classes/IDs, partial attribute matching
Partial Text	 |	Menu items, labels with long/variable content
Collection with Index|	Tables, multiple buttons with same label
--------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
###Verification Methods: 

ui-chkbox-box ui-widget ui-corner-all ui-state-default
ui-chkbox-box ui-widget ui-corner-all ui-state-default ui-state-active





