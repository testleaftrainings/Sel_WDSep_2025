*************************************************************************************
‚úÖ Real-Time Use Cases for XPath Axes:


1Ô∏è) parent:: ‚Äì When child has no unique data, but parent does

üéØ Use Case:
You know the child tag (like <label>) and want to reach its parent <div> or vice versa.

2) ancestor:: ‚Äì Move up the DOM tree

üéØ Use Case:
You find a child node but need to click or validate a container card/div.

3)following:: | preceding:: ‚Äì Find elements anywhere after/before

üéØ Use Case:
You found a label but want to jump to a different kind of element later.

‚öñÔ∏è Comparison: preceding:: vs ancestor::
---------------------------------------------------------------------------------------------------------------------------------------
Aspect		      |			preceding::					     |			ancestor::
-----------------------------------------------------------------------------------------------------------------------------------------
üîÅ Traversal Direction  Goes upward + left (document order, not necessarily direct parent)	Goes strictly upward (only through the parent hierarchy)
üìç Type of nodes		Selects all nodes before the current node in the DOM			Selects only parent, grandparent,(i.e.the chain of parents)
üìê Relationship		Not limited to hierarchy ‚Äî can select siblings, previous elements	Hierarchy-based ‚Äî only parents
üéØ Use case		Find labels, sections, or data that comes before the element		Find a parent container, form, div wrapping the element
--------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------------------------------
‚öñÔ∏è Comparison: following:: vs grandparent//grandChildTag
---------------------------------------------------------------------------------------------------------------------------------------------
Aspect	               |		following::					     |		grandparent//grandChildTag
---------------------------------------------------------------------------------------------------------------------------------------------
üîÅ Traversal Direction | Moves forward in document order, from the current node onward	     |   Moves downward in DOM hierarchy, starting from a known ancestor
üìê Relation	       | Not limited to child or hierarchy, just "any tag that appears after"|	Strictly hierarchical: goes from known parent/ancestor to nested children
üîç Scope	       | All nodes that appear after current one, in entire document	     |   Scoped within a subtree under the grandparent
üéØ Use case	       | Find next field, button, or message	                             |   Find nested elements from a common container
================================================================================================================================================

4)following-sibling:: | preceding-sibling:: ‚Äì To go forward and backwards 

üéØ Use Case:
You see a value, but you want the label or name before it.

üîë When to use Axes in Real Projects:
----------------------------------------------------------------------------------------------------------------
Scenario							     |      Use XPath Axis
----------------------------------------------------------------------------------------------------------------
Child element is easy to locate, but parent has the clickable area   |	parent::, ancestor::
Two elements are side by side					     |	following-sibling::, preceding-sibling::
Deep nested structure or tables					     |	following::, preceding::
-----------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------
###Verification Methods: 

ui-chkbox-box ui-widget ui-corner-all ui-state-default
ui-chkbox-box ui-widget ui-corner-all ui-state-default ui-state-active




--------------------------------------------------------------------------------------

‚Äúwhat is happening‚Äù--> process-oriented model-->code acting on data.
Code is a set of instructions written to manipulate or process data. This includes reading input, performing calculations or logic, and producing output.


‚Äúwho is being affected.‚Äù--->object-oriented programming -->data controlling access to code.

üîπ In OOP, data and behavior are bundled together in classes and objects.
So when we say "data controls access to code", in OOP it shows up in several ways:


‚úÖ 1. Access Modifiers (Encapsulation)
In OOP, we use access modifiers (private, public, protected) to control access to data and methods from outside the class.
‚úÖ 2. Polymorphism / Method Overriding with Conditions
A subclass can decide whether or not to allow certain behavior based on internal data (state).

----------------------------------------------------------------
Inheritance:

class subclass-name extends superclass-name { 
   // body of class 
}

Definition of Inheritance:

Inheritance is a fundamental principle in object-oriented programming that allows a class to inherit properties and behaviors (methods) from another class.
This uses "extends" keyword

Advantages of Inheritance:

Reusability: Inheritance promotes the reuse of existing code without having to rewrite it.
Readability: It makes the code more simple by establishing clear relationships between classes.
Hierarchy: Establishes parent-child relationships between Classes and Interfaces, making the structure easier to understand and maintain.

Types of Inheritance:

Single: A class inherits from one parent class.
Multiple: A class inherits behaviors from more than one class, typically achieved through interfaces in Java.
Multilevel: A class inherits from a child class, creating a multilevel chain.
Hierarchical: Multiple classes inherit from a single parent class.
Hybrid: A combination of multilevel and hierarchical inheritance.


Java Examples:

RuntimeException extends Exception
List extends Collection
Selenium WebDriver Examples: - 
ChromeDriver extends ChromiumDriver - EdgeDriver extends ChromiumDriver - ChromiumDriver extends RemoteWebDriver

***********************************************************************************************************

